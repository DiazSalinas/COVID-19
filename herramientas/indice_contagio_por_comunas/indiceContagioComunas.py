#!/usr/bin/env python2# -*- coding: utf-8 -*-"""Created on Tue Mar 31 11:55:42 2020@author: esteban"""# Este script necesita que instales # conda install geopandas#conda install -c conda-forge descartesimport geopandas as gpdimport matplotlib.pyplot as pltimport pandas as pdimport numpy as npimport sys#reload(sys)#sys.setdefaultencoding('utf8')## Primero necesitamos cargar los polígonos de las comunas.# poligonos descargados desde https://www.bcn.cl/siit/mapas_vectoriales/index_htmlshp_path = "../../fuentes/geometrias_comunas/comunas.shp"comunasChile = gp.read_file(shp_path)#aprovechamos al toque de calcular la superficie de cada comuna en km2comunasChile['superficie']=comunasChile.to_crs({'init': 'epsg:3035'}).area/10**6## Luego cargamos los datos del COVID19datos_path="../../datos/informes_diarios_comunas/2020-04-10-InformeDiarioComunas-COVID19.csv"datosComunas = pd.read_csv(datos_path)'''comunasChile.columns =  Index(['objectid', 'shape_leng', 'dis_elec', 'cir_sena', 'cod_comuna',       'codregion', 'st_area_sh', 'st_length_', 'Region', 'Comuna',       'Provincia', 'geometry'],      dtype='object')'''## Necesitamos que las columnas tengan el mismo nombre:comunasChile['nombre_comuna']=comunasChile.Comuna############################################################df=comunasChile.merge(datosComunas, on='nombre_comuna')'''df.columns=Index(['id_region', 'nombre_region', 'id_comuna', 'nombre_comuna', 'poblacion',       'casos_totales', 'tasa', 'objectid', 'shape_leng', 'dis_elec',       'cir_sena', 'cod_comuna', 'codregion', 'st_area_sh', 'st_length_',       'Region', 'Comuna', 'Provincia', 'geometry'],      dtype='object') ''' ### Los datos por Comuna tienen que ser arreglados.#   Primero, a partir de la columna de tasa y la de población, hay que#   reconstruir los datos de los casos (porque sólo informan cuando hay más# de 4 casos)df['casos_totales']=df.casos_totales.replace('-',0)df['casos_totales']=df.casos_totales.fillna(0)df['casos_totales']=df.casos_totales.astype(int)df['tasa']=df.tasa.fillna(0)df['tasa']=df.tasa.astype(float)df['poblacion']=df.poblacion.fillna(0)##Ahora corregimos los datos de los casos totales.df['casos_totales']=(df.tasa*df.poblacion/100000).round(0).astype(int)#########################################################################################################################################################   CALCULO DE RIESGO = casos*poblacion/superficie########################################################################################################################################################df['riesgo']=df['casos_totales']*df['poblacion']/df['superficie']rm= df[df.Region=='Región Metropolitana de Santiago']rm.plot()# Control del tamaño de la figura del mapafig, ax = plt.subplots(figsize=(30, 30))# Control del título y los ejesax.set_title(u'Comunas del Gran Santiago por Índice de Riesgo de Contagio',              pad = 20,              fontdict={'fontsize':20, 'color': 'black'})                       # Control del título y los ejes#ax.set_xlabel('Longitud')#ax.set_ylabel('Latitud')plt.axis('off')#ax.legend(fontsize=1000)# Añadir la leyenda separada del mapafrom mpl_toolkits.axes_grid1 import make_axes_locatabledivider = make_axes_locatable(ax)cax = divider.append_axes("right", size="5%", pad=0.2)#map_STGO[(map_STGO.NOMBRE!='Santiago')&(map_STGO.NOMBRE!='Providencia')&(map_STGO.NOMBRE!='Ñuñoa')&(map_STGO.NOMBRE!='Las Condes')] # Mostrar el mapa finalizadorm.plot(column='riesgo',         cmap='Reds', ax=ax,        legend=True,        legend_kwds={'label': "Riesgo de Contagio",},        cax=cax, zorder=5,        missing_kwds={"color": "lightgrey",                      "edgecolor": "black",                      "hatch": "///"#,                                              #"label": "Missing values",                      })plt.rcParams['font.size'] = 7map_STGO[(map_STGO.NOMBRE!='Santiago')&&(map_STGOOMBRE!='Providencia')&&(map_STGO.NOMBRE!='Nunoa')]comunasChile = gp.read_file(shp_path) '''comunasChile.columns =  Index(['objectid', 'shape_leng', 'dis_elec', 'cir_sena', 'cod_comuna',       'codregion', 'st_area_sh', 'st_length_', 'Region', 'Comuna',       'Provincia', 'geometry'],      dtype='object')'''## Necesitamos que las columnas tengan el mismo nombre:comunasChile['nombre_comuna']=comunasChile.Comuna############################################################df=datosComunas.merge(comunasChile, on='nombre_comuna')