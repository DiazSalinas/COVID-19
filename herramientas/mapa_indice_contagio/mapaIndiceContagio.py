#!/usr/bin/env python2# -*- coding: utf-8 -*-"""Created on Tue Mar 31 11:55:42 2020@author: esteban"""# Este script necesita que instales # conda install geopandas#conda install -c conda-forge descartesdef mapaIndiceContagio(fechaAAnalizar,                     lista_indices):        import geopandas as gp    import matplotlib.pyplot as plt    import pandas as pd    import numpy as np    import sys            import unicodedata        def strip_accents(text):            try:            text = unicode(text, 'utf-8')        except NameError: # unicode is a default on python 3             pass            text = unicodedata.normalize('NFD', text)\               .encode('ascii', 'ignore')\               .decode("utf-8")            return str(text)        s = strip_accents('àéêöhello')        #print(s)        #reload(sys)    #sys.setdefaultencoding('utf8')            ## Primero necesitamos cargar los polígonos de las comunas.    # poligonos descargados desde https://www.bcn.cl/siit/mapas_vectoriales/index_html    shp_path = "../../fuentes/geometrias_comunas/comunas.shp"    comunasChile = gp.read_file(shp_path)    #aprovechamos al toque de calcular la superficie de cada comuna en km2    comunasChile['superficie']=comunasChile.to_crs({'init': 'epsg:3035'}).area/10**6                ## Luego cargamos los datos del COVID19    datos_path="../../Consolidado_COVID19_Chile_Comunas.CSV"    #datos_path="../../COVID19_Chile_Comunas-casos_totales.CSV"    datosComunas = pd.read_csv(datos_path)        df=datosComunas        #################################### Aumento porcentual        ############ Idea 1    fechas=df.fecha.unique()    i=1    df_old=df    while i<len(fechas):                old=df[df.fecha==fechas[i-1]][['id_comuna','casos_totales']]        old=old.rename(columns={'casos_totales':'casos_totales_old'})            # Si mantenemos la fecha del new, donde vamos a calcular los casos nuevos        new=df[df.fecha==fechas[i]][['fecha','id_comuna','casos_totales']]        new=new.rename(columns={'casos_totales':'casos_totales_new'})        old_new=pd.merge(old,new,on=['id_comuna'])        old_new['var1periodo']=(old_new.casos_totales_new-old_new.casos_totales_old)*100/old_new.casos_totales_old        old_new=old_new[['fecha','id_comuna','var1periodo']]        if (i==1):            #para el primero hacemos merge, porque la columna casos_nuevos no existe en df            df=pd.merge(df,old_new,how='left',on=['fecha','id_comuna'])        else:            df_aporte=pd.merge(df_old,old_new,how='left',on=['fecha','id_comuna'])            #para todo el resto tenemos que sobreescribir los datos            df[df.fecha==fechas[i]]=df_aporte[df_aporte.fecha==fechas[i]]                    i=i+1        df['var1periodo']=df['var1periodo'].fillna(0)    df['var1periodo']=df['var1periodo'].replace([np.inf, -np.inf], np.nan).fillna(0)        ########### Idea 2                                                                                                                                        df=df[df.fecha==fechaAAnalizar]        ## Necesitamos que las columnas tengan el mismo nombre:    comunasChile['nombre_comuna']=comunasChile.Comuna    ############################################################        df=comunasChile.merge(df, on='nombre_comuna')         df['nombre_comuna']=df.nombre_comuna.replace('San Juan de la Costa','S.J. de la Costa')        ######################################    ######################################    ######################################    ######################################        #   CALCULO DE RIESGO = casos*poblacion/superficie        ######################################    ######################################    ######################################        ######################################    df['riesgo']=df['casos_totales']*df['poblacion']/df['superficie']    # Lo normalizamos!    df['riesgo']=df['riesgo']/df['riesgo'].max()    df['casos_pp']=df['casos_totales']/df['poblacion']*100000        df['casos_totales']=df['casos_totales'].astype(int)    df['casos_activos']=df['casos_activos'].astype(int)    df['riesgo_activos']=df['casos_activos']*df['poblacion']/df['superficie']    # Lo normalizamos!    df['riesgo_activos']=df['riesgo_activos']/df['riesgo_activos'].max()        df['riesgo_activos_variacion']=df['riesgo_activos']*df['var1periodo']            df['casos_activos_pp']=df['casos_activos']/df['poblacion']*100000                rm= df[df.Region=='Región Metropolitana de Santiago']        gran_stgo_path="../../fuentes/gran_stgo/gran_stgo.csv"    #datos_path="../../COVID19_Chile_Comunas-casos_totales.CSV"    gran_stgo = pd.read_csv(gran_stgo_path)            rm=rm.merge(gran_stgo, left_on='nombre_comuna', right_on='nombre_comuna', sort='False')            stgo= rm[rm.gran_stgo==1]        for indice in lista_indices:        # Control del tamaño de la figura del mapa        fig, ax = plt.subplots(figsize=(30, 30))        # Control del título y los ejes        ax.set_title(u'Comunas del Gran Santiago por'+indice,                       pad = 20,                       fontdict={'fontsize':20, 'color': 'black'})                                       # Control del título y los ejes        #ax.set_xlabel('Longitud')        #ax.set_ylabel('Latitud')        plt.axis('off')        #ax.legend(fontsize=1000)        # Añadir la leyenda separada del mapa        from mpl_toolkits.axes_grid1 import make_axes_locatable        divider = make_axes_locatable(ax)        cax = divider.append_axes("right", size="5%", pad=0.2)        #map_STGO[(map_STGO.NOMBRE!='Santiago')&(map_STGO.NOMBRE!='Providencia')&(map_STGO.NOMBRE!='Ñuñoa')&(map_STGO.NOMBRE!='Las Condes')]         # Mostrar el mapa finalizado        stgo.plot(column=indice,                 cmap='Reds', ax=ax,                legend=True,                legend_kwds={'label': indice},                cax=cax, zorder=5,#                linewidth=1, edgecolor='0.5',                missing_kwds={"color": "lightgrey",                              "edgecolor": "black",                              "hatch": "///"                                                      #"label": "Missing values",                              })                plt.savefig(fechaAAnalizar+'-'+indice+'.png')        plt.savefig(fechaAAnalizar+'-'+indice+'.pdf')    '''    stgo.plot(column='riesgo',cmap='Reds', ax=ax,            legend=Truelegend_kwds={'label': "Riesgo de Contagio"},            cax=cax, zorder=5,            missing_kwds={"color": "lightgrey",                          "edgecolor": "black",                          "hatch": "///"                      })#,                                                  #"label": "Missing values",})    '''